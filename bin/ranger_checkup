#!/usr/bin/env python
# -*- coding: utf-8 -*-
import logging
import time, math
from ranger.res import ID
from ranger import Ranger
from ranger.actions.look import *

results = {}

def test(msg, action, *args, **kwargs):
    print("\n" + msg)

    if args and kwargs:
        action(*args, **kwargs)
    elif args:
        action(*args)
    elif kwargs:
        action(**kwargs)
    else:
        action()

    res = raw_input("Press enter if ok, space in case of failure, q to interrupt")
    if res == "":
        results[action.func.__name__ + str(args)] = True
    else:
        results[action.func.__name__ + str(args)] = False

    if res == "q":
        raise Exception()

def checkvalue(msg, robot, sensor, value, delta = None, waitkeypress = True):

    if waitkeypress:
        print("\n" + msg)
        raw_input("Press enter to continue...")
    
    raw = getattr(robot, sensor)

    if (delta and abs(raw - value) < delta) or raw == value:
        results[sensor] = True
    else:
        results[sensor] = False

if __name__ == "__main__":
    logger.info("Ranger checkup")

    with Ranger(dummy = False) as robot:
        robot.loglevel(logging.DEBUG)

        raw_input("Place the robot on the charging station, and press Enter")

        try:
            #time.sleep(0.3) # let some time for the robot to settle
            #checkvalue("Put the lolette", robot, "lolette", True)
            #checkvalue("Remove the lolette", robot, "lolette", False)
            #checkvalue("Hide front IR sensors", robot, "ir_center", 0, delta = 0.05)
            #checkvalue("", robot, "ir_left", 0, delta = 0.05, waitkeypress = False)
            #checkvalue("", robot, "ir_right", 0, delta = 0.05, waitkeypress = False)

            test("Move 30cm forward", robot.move, 0.3)
            test("Move 20cm forward, twice as fast", robot.move, 0.2, v=0.4)
            test("Move 20cm backward", robot.move, -0.2)
            test("Turn 90° left", robot.turn, math.pi/2, w = 0.5)
            test("Turn 90° right", robot.turn, -math.pi/2, w = 0.5)
            test("Full turn, twice as fast", robot.turn, 2*math.pi, w = 1.)

            test("Face (0,1) in robot frame (should be 90° left)", robot.face, [0,1,0, "base_link"])
            test("Face (-1,0) in robot frame (should be U-turn)", robot.face, [-1,0,0, "base_link"])
            test("Face (0,-1) in robot frame (should be 90° right)", robot.face, [0,-1,0, "base_link"])

            test("Face (2,0) in map frame (should be U-turn)", robot.face, [2,0,0, "map"])
            test("Face (0.3,1) in map frame (should be 90° left)", robot.face, [0.3,1,0, "map"])
            test("Face (0.3,-1) in map frame (should be U-turn)", robot.face, [0.3,-1,0, "map"])
            test("Face (0,0) in map frame (should face station)", robot.face, "map")

            test("Orient to 0° in map frame (should be U-turn)", robot.orient, "map")
            test("Orient to 90° in map frame (should be 90° left)", robot.orient, [0,0,0,0,0,math.pi/2])
            test("Orient to 90° in robot frame (should be 90° left)", robot.orient, [0,0,0,0,0,math.pi/90, "base_link"])

            test("Goto (0.5, 0.5, 0°) in map frame", robot.goto, [0.5, 0.5, 0, 0, 0, 0])
            test("Goto (0.5, 0.5, -90°) in map frame (should be 90° right", robot.goto, [0.5, 0.5, 0, 0, 0, -math.pi/2])


            test("Eyes + lids centered", robot.eyes, 0, 0, l_upper_lid = 50)
            test("Eyes on left side", robot.eyes, -100, 0)
            test("Eyes on right side", robot.eyes, 100, 0)
            test("Eyes on top", robot.eyes, 0, -100)
            test("Eyes on bottom", robot.eyes, 0, 100)
            test("Eyelids wide open", robot.eyes, 0, 0, l_upper_lid = 100)
            test("Eyelids closed", robot.eyes, 0, 0, l_upper_lid = 0)


        except Exception:
            logger.info("Interrupted.")


    print("\n\n")
    for k,v in results.items():
        print(k + "\t\t\t-> " + str(v))
