#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging;logger = logging.getLogger("ranger")
logger.addHandler(logging.NullHandler())


import sys
import time
import math

from ranger.lowlevel.ranger_aseba import Ranger, BATTERY_LOW_THRESHOLD
from ranger.res import ID
from ranger.helpers.plot import XYPlot

from consoletk import ConsoleTK

# to poll the keyboard
import select

# Dummy values used by the low-level emulator
main_msg = [ 1.2, 0.4, 1.5,
            0.43, 0.54,
            3452,
            1,
            1.2, 2.5,
            0b100110100, 0b000100110, 0b001000111,
            1234,34324,5432,34554,
            0,
            1.6,2.3]
neuil_msg = [0.12, 1.03, 0.03,
                0,
                0.023]


class Monitor:

    def __init__(self, silent = False, showtraj = False):
        self.robot = Ranger()

        self.showtraj = showtraj
        # used for debugging purposes (-> if set to true, no ANSI sequence -> no mess with debug msgs)
        self.silent = silent

        if not silent:
            self.out = ConsoleTK(height = 12)

        self.speed = [0, 0]

        self._freqs = []
        self.freq = 0

    def __enter__(self):

        if not self.silent:
            self.out.__enter__()
        self.running = True
        return self

    def __exit__(self, type, value, traceback):
        self.running = False
        if not self.silent:
            self.out.__exit__(type, value, traceback)
        self.robot.close()

    def showstatus(self):

        robot = self.robot
        state = self.robot.state
        ###################################################
        ### General stuff
        ###################################################

        self.out.boolean(state.lolette, "Lolette")
        self.out.relmoveto(10,0)
        self.out.boolean(state.bumper, "Bumper")

        self.out.moveto(22,0)
        self.out.absolutebar(state.scale, 10, "kg", label = "Scale", maxlength = 20, autocolor = True, highishot = True)
        self.out.moveto(60,0)
        self.out.absolutebar(state.battery, 8500, 
                             "mV", label = "Battery" + (" (charging)" if state.charging else ""), 
                             autocolor = True)

        self.out.moveto(0,2)
        self.out.absolutebar(state.velocity_left, 100, "%", maxlength=25, label = " Left wheel", minvalue = -100)
        self.out.relmoveto(0,1)
        self.out.absolutebar(state.velocity_right, 100, "%", maxlength=25, label = "Right wheel", minvalue = -100)

        self.out.moveto(48,2)
        self.out.vseparator(2)
        self.out.moveto(50,2)
        self.out.label("Robot odometry:")
        self.out.relmoveto(0,1)
        self.out.label("x:{:>5.2f}m, y:{:>5.2f}m, θ:{:>6.1f}°".format(state.x, state.y, 180. / math.pi * state.theta))

        ###################################################
        ### Beacons
        ###################################################

        self.out.moveto(79,2)
        self.out.vseparator(8)

        self.out.moveto(81,1)

        # clear!
        self.out.clear(60, 9)

        for beacon in robot.beacons.values():
            if not beacon.obsolete():
                self.out.relmoveto(0,1)
                self.out.label("Beacon %s detected" % beacon.id)
                self.out.relmoveto(0,1)
                if beacon.valid:
                    self.out.label("Robot seen at: (%.2fm, %.1f°), beacon seen at: (%.2fm, %.1f°)" % \
                                        (beacon.r, 
                                        180./math.pi * beacon.theta,
                                        beacon.dist,
                                        180./math.pi * beacon.phi), fg="base0")
                    self.out.relmoveto(0,1)
                    #self.out.label("-> robot at: (x:{:>5.2f}m, y:{:>5.2f}m, {:>5.1f}°)".format(beacon.robot_x, beacon.robot_y, beacon.robot_theta), fg="base0")
                    self.out.label("-> beacon at: (x:{:>5.2f}m, y:{:>5.2f}m), orientation: {:>5.1f}°)".format(beacon.x, beacon.y, 180./math.pi * beacon.beacon_theta), fg="base0")
                else:
                    self.out.label("(out of sight or too close or not facing)")
                    self.out.relmoveto(0,1)

        ###################################################
        ### Touch sensors
        ###################################################

        self.out.moveto(0,5)
        self.out.label("Touch sensors")
        self.out.relmoveto(0,1)
        self.out.booleanmatrix(state.touch_left, label = " left")

        self.out.relmoveto(7,0)
        self.out.booleanmatrix(state.touch_rear, label = " rear")

        self.out.relmoveto(7,0)
        self.out.booleanmatrix(state.touch_right, label = " right")

        ###################################################
        ### Infrared sensors
        ###################################################

        self.out.moveto(30,7)
        self.out.absolutebar(state.ir_left, 0.5, "m", label = "  IR left", autocolor = True)
        self.out.relmoveto(0,1)
        self.out.absolutebar(state.ir_center, 2.1, "m", label = "IR center", autocolor = True)
        self.out.relmoveto(0,1)
        self.out.absolutebar(state.ir_right, 0.5, "m", label = " IR right", autocolor = True)

        ###################################################
        ### Update frequencies
        ###################################################

        self.out.moveto(0,11)
        self.out.label("Freq. main: %4.1fHz | Freq. neuil: %4.1fHz | Freq. R&B: %4.1fHz | Monitor: %4.1fHz" % (state.freq_main, state.freq_neuil, state.freq_rab, self.freq))


    def controller(self, key):

        MAX_SPEED = 0.5

        robot = self.robot

        if key == self.out.ARROW_UP:
            self.speed[0] += MAX_SPEED / 10
            self.speed[1] += MAX_SPEED / 10
            robot.speed(*self.speed)

        elif key == self.out.ARROW_DOWN:
            self.speed[0] -= MAX_SPEED / 10
            self.speed[1] -= MAX_SPEED / 10
            robot.speed(*self.speed)

        elif key == self.out.ARROW_LEFT:
            self.speed[0] += MAX_SPEED / 10
            self.speed[1] -= MAX_SPEED / 10
            robot.speed(*self.speed)

        elif key == self.out.ARROW_RIGHT:
            self.speed[0] -= MAX_SPEED / 10
            self.speed[1] += MAX_SPEED / 10
            robot.speed(*self.speed)

        elif key == " ":
            self.speed = [0, 0]
            robot.speed(0, 0)


    def _freq(self, hz):
        self._freqs.append(hz)
        if len(self._freqs) == 10:
            self.freq = sum(self._freqs) / 10
            self._freqs = []

    def run(self):

        if not hasattr(self, 'running'):
            print("Monitor.run must be called from inside a 'with' statement")

        key = ""

        last_time = time.time()
        
        if self.showtraj:
            trajplot = XYPlot(x = (-2, 2), y= (-2, 2))

        try:
            while self.running and key != "q":
                if not self.silent:
                    key = self.out.get_keypress()
                    self.controller(key)

                    self.out.moveto(0, 0)
                    self.showstatus()

                if self.showtraj:
                    trajplot.add(self.robot.state.x, self.robot.state.y, self.robot.state.theta)

                    for beacon in self.robot.beacons.values():
                        if beacon.last_valid_pose:
                            trajplot.poi("beacon_%s" % beacon.id,
                                         beacon.last_valid_pose["x"], 
                                         beacon.last_valid_pose["y"])


                now = time.time()
                self._freq(1. / (now - last_time))
                last_time = now

                time.sleep(max(0., 0.02 - (now - last_time)))

        except KeyboardInterrupt:
            pass
        finally:
            self.robot.speed(0)


if __name__ == '__main__':

    with Monitor(silent = False, showtraj = True) as monitor:
            monitor.run()

